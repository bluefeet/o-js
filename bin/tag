#!/usr/bin/env perl
use strict;
use warnings;
use autodie;

use FindBin qw( $Bin );
use Getopt::Long;
use Pod::Usage qw( pod2usage );

use lib $Bin;
use Util;

GetOptions(
    'help'       => \my $help,
    'next=s'     => \my $next,
    'version=s'  => \my $version,
    'repo-dir=s' => \my $repo_dir,
    'force'      => \my $force,
    'no-prompt'  => \my $no_prompt,
) or die "ERROR: Unable to process options.\n";

if ($help) {
    pod2usage( -verbose => 2 );
    exit 0;
}

die "ERROR: Either the --next or --version arguments must be passed.\n"
    unless $next or $version;

my $u = Util->new( $repo_dir ? (repo_dir => $repo_dir) : () );
$repo_dir = $u->repo_dir();

die "ERROR: There are working tree changes in $repo_dir (use --force to bypass this check).\n"
    unless $force or !$u->is_git_dirty();

$version ||= $u->current_version();
$version = $u->next_version( $version, $next ) if $next;

print "The version for this tag will be $version.\n";
exit 0 unless $no_prompt or $u->ask_yn('Continue and insert this version into files? [y/N]', 'n');

inject_version();
print $u->git_run('diff', '-U0', "$repo_dir/") unless $no_prompt or !$u->ask_yn('Show git diff? [Y/n]', 'y');

exit 0 unless $no_prompt or $u->ask_yn('Continue and stage all changes for commit? [y/N]', 'n');
stage_changes();

exit 0 unless $no_prompt or $u->ask_yn('Continue and commit all staged changes? [y/N]', 'n');
commit_changes();

exit 0 unless $no_prompt or $u->ask_yn('Continue and create the tag? [y/N]', 'n');
create_tag();

exit 0 unless $no_prompt or $u->ask_yn('Continue and push tag to origin? [y/N]', 'n');
push_tag();

exit 0 unless $no_prompt or $u->ask_yn('Continue and push to the current branch on origin? [y/N]', 'n');
push_current();

print "All done, happy releasing!\n";

sub inject_version {
    my $stamp = $u->stamp();

    # CHANGES.txt's first line should be "DEVELOPMENT VERSION".
    my $changes_re = qr{^(DEVELOPMENT VERSION)};

    # package.json and bower.json should have a "version":"..." field.
    my $json_re = qr{("version"\s*:\s*").*?(")};

    # The combined and minified sources should have a banner.
    my $js_re = qr{(o.js : ).*?( : http)};

    my $changes_txt = $u->slurp('CHANGES.txt');
    die "ERROR: CHANGES.txt looks broken.\n"
        if $changes_txt !~ $changes_re;

    my $package_json = $u->slurp('package.json');
    die "ERROR: package.json doesn't have a version field.\n"
        if $package_json !~ $json_re;

    my $bower_json = $u->slurp('bower.json');
    die "ERROR: bower.json doesn't have a version field.\n"
        if $bower_json !~ $json_re;

    my $o_js = $u->slurp('o.js');
    die "ERROR: o.js appears to be missing the version banner.\n"
        if $o_js !~ $js_re;

    my $o_min_js = $u->slurp('o.min.js');
    die "ERROR: o.min.js appears to be missing the version banner.\n"
        if $o_min_js !~ $js_re;

    $changes_txt =~ s{$changes_re}{$version : $stamp};
    $u->spew('CHANGES.txt', $changes_txt);

    $package_json =~ s{$json_re}{$1$version$2};
    $u->spew('package.json', $package_json);

    $bower_json =~ s{$json_re}{$1$version$2};
    $u->spew('bower.json', $bower_json);

    $o_js =~ s{$js_re}{$1$version$2};
    $u->spew('o.js', $o_js);

    $o_min_js =~ s{$js_re}{$1$version$2};
    $u->spew('o.min.js', $o_min_js);
}

sub stage_changes {
    $u->git_run('add', "$repo_dir/");
}

sub commit_changes {
    $u->git_run('commit', '-m', "Release $version.");
}

sub create_tag {
    $u->git_run('tag', '-m', "Release $version.", "v$version");
}

sub push_tag {
    $u->git_run('push', '--follow-tags');
}

sub push_current {
    $u->git_run('push', '-f', 'origin', 'HEAD:refs/heads/current');
}

__END__

=head1 NAME

version - Find the latest version in git and/or figures out the next version.

=head1 SYNOPSIS

    bin/version

=head1 DESCRIPTION

This script is used during the release process to figure out the
next version for a release.

=head1 ARGUMENTS

=head2 help

    bin/version --help

Shows this documentation.

=head2 next

    bin/version --next=<patch|minor|major>
    bin/version --version=1.2.3 --next=patch # 1.2.4
    bin/version --version=1.2.3 --next=minor # 1.3.0
    bin/version --version=1.2.3 --next=major # 2.0.0

When specified this will output a version with the specified
next version level incremented by 1.

By default the version is not incremented.

=head2 version

    bin/version --version=1.2.3 # 1.2.3

Specify the version that will be used.

By default the latest version will be found by looking at the
git tags in L</repo-dir>.

=head2 repo-dir

    bin/version --repo-dir=<path-to-o-js-repo>

The directory where the o-js git repo is cloned.  Defaults to
C<script-dir/..>.
