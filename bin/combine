#!/usr/bin/env perl
use strict;
use warnings;
use autodie;

use FindBin qw( $Bin );
use Getopt::Long;
use Pod::Usage qw( pod2usage );

use lib $Bin;
use Util;

GetOptions(
    'help'       => \my $help,
    'repo-dir=s' => \my $repo_dir,
    'require=s'  => \my @requires,
) or die "Unable to process options.\n";

if ($help) {
    pod2usage( -verbose => 2 );
    exit 0;
}

my $u = Util->new( $repo_dir ? (repo_dir => $repo_dir) : () );

@requires = map { split(/,/, $_) } @requires;
if (!@requires) {
    my $js = $u->slurp("lib/o.js");

    $js =~ s{
        (\S+): \s* require\(
    }{
        push @requires, $1;
        '';
    }sxeg;
}

my $files = {};
load_file( $_ ) for @requires;

print "Generating combined JavaScript...\n";

my $names_added = {};
my @names_sorted;
my @names_left = sort keys %$files;

while (@names_left) {
    my $name = shift @names_left;
    my $file = $files->{$name};
    my $resolved = 1;

    foreach my $require (@{ $file->{requires} }) {
        $resolved = 0 if !$names_added->{$require};
    }

    if ($resolved) {
        push @names_sorted, $name;
        $names_added->{$name} = 1;
    }
    else {
        push @names_left, $name;
    }
}

print "Done generating.\n";

print "Writing combined JavaScript...\n";

my $js = <<JS;
// o.js : DEVELOPMENT VERSION : https://o-js.com : MIT License

(function() {
'use strict';

var root = this;
var previousO = root.o;

JS

foreach my $name (@names_sorted) {
    $js .= "\n// o.$name\n";
    $js .= $files->{$name}->{js};
}

$js .= <<JS;

root.o = o;
root.oJS = o;

o.noConflict = function () {
    root.o = previousO;
    return o;
};

}).call(this);
JS

$u->spew('o.js', $js);

print "All done!\n";

sub load_file {
    my ($name) = @_;
    return if $files->{$name};
    my $file = $files->{$name} = {};

    print "Loading o-$name module.\n";

    my $js = $u->slurp("lib/o-$name.js");

    my @requires;
    $js =~ s{
        var \s+ \S* \s* = \s* require\( '\./o-([^.]+).*?' \);
    }{
        push @requires, $1;
        '';
    }sxeg;

    load_file( $_ ) for @requires;

    $js =~ s{^var o = require\('\./o-bootstrap\.js'\);$}{}m;
    $js =~ s{^module\.exports =}{var o_$name =}m;
    $js =~ s{^\s*(.*?)\s*$}{$1}s;

    $file->{requires} = \@requires;
    $file->{js} = "$js\n";

    return;
}

__END__

=head1 NAME

combine - Combine the source o.js modules into a single file.

=head1 SYNOPSIS

    cd o-js
    bin/combine
    git add o.js

=head1 DESCRIPTION

This script takes the various o.js source CommonJS/NPM style modules
and creates a single JavaScript file ready for inclusion in a website.

=head1 ARGUMENTS

=head2 help

    bin/combine --help

Shows this documentation.

=head2 repo-dir

    bin/combine --repo-dir=<path-to-o-js-repo>

The directory where the o-js git repo is cloned.  Defaults to
C<script-dir/..>.

=head2 out-file

    bin/combine --out-file=<path-to-out-js>

The filename to write the resulting, combined, JavaScript to.  Defaults
to C<repo-dir/o.js>.

=head2 require

    bin/combine --require=<module>,<module>

A list of required o.js modules that you would like included in the
resulting combined JavaScript.  If a module specified has dependencies
that are not specified then the dependencies will automatically be
included.

Defaults to all modules required by the main C<o.js> module found in
the lib directory.
